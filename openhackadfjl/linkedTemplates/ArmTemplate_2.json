{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "openhackadfjl"
		},
		"FileServerFourthCoffee_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FileServerFourthCoffee'"
		},
		"SqlServerVanArsDelLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServerVanArsDelLinkedService'"
		},
		"FileServerFourthCoffee_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "c:\\"
		},
		"FileServerFourthCoffee_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "openhackadmin"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/movieJason')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RawMovie",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@utcnow()",
							"type": "Expression"
						},
						"folderPath": "movies",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/rawFourthCoffeeCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openhackStorageAcctLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "fourthCoffee",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vanarsdelTransDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RawMovie",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Transactions",
						"folderPath": "vanarsdel",
						"fileSystem": "raw"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "TransactionID",
						"type": "UTF8"
					},
					{
						"name": "CustomerID",
						"type": "UTF8"
					},
					{
						"name": "MovieID",
						"type": "UTF8"
					},
					{
						"name": "RentalDate",
						"type": "INT32"
					},
					{
						"name": "ReturnDate",
						"type": "INT32"
					},
					{
						"name": "RentalCost",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "LateFee",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "RewindFlag",
						"type": "BOOLEAN"
					},
					{
						"name": "CreatedDate",
						"type": "DATE"
					},
					{
						"name": "UpdatedDate",
						"type": "DATE"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServerFourthCoffee')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServerFourthCoffee_properties_typeProperties_host')]",
					"userId": "[parameters('FileServerFourthCoffee_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServerFourthCoffee_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerVanArsDelLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServerVanArsDelLinkedService_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime4onpremiseSQL",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cloudSales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupCloudSales",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlCloudSales",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupCloudSales",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupCloudSales').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy CloudSales",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "CloudSalesTable",
											"type": "DatasetReference",
											"parameters": {
												"cloudsalestable": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												},
												"cloudsalesschema": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Parquet1",
											"type": "DatasetReference",
											"parameters": {
												"folderTable": {
													"value": "@concat(item().TABLE_SCHEMA,'.',item().TABLE_NAME)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-09-24T02:34:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cloudStreaming')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cloudStreamingLookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureStreamingTables",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "cloudStreamingLookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('cloudStreamingLookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyDataStreamingTables",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "CloudStreamingTable",
											"type": "DatasetReference",
											"parameters": {
												"cloudstreamingtable": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												},
												"cloudstreamingschema": "@item().TABLE_SCHEMA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Parquet2",
											"type": "DatasetReference",
											"parameters": {
												"cloudstreamingfolder": "@concat(item().TABLE_SCHEMA,'.',item().TABLE_NAME)"
											}
										}
									]
								}
							]
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-09-24T02:34:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copymovies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Movies",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbSqlApiSource",
								"preferredRegions": []
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CosmosDbSqlApiCollection1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "movieJason",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-09-24T02:34:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movieJason')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FourthCoffeeCSVFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FileServerFourthCoffee",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": "Rentals"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FileServerFourthCoffee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerVanArsDelLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dbschema": {
						"type": "string"
					},
					"dbtable": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().dbschema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().dbtable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerVanArsDelLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VanArsDelSQLViewDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerVanArsDelLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "TABLE_SCHEMA",
						"type": "nvarchar"
					},
					{
						"name": "TABLE_NAME",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "StageTables"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerVanArsDelLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/flattenMovies')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "JsonFromRaw",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet4OnlineMoviesFlattenedDS",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\t{_attachments} as string,\n\t\t{_etag} as string,\n\t\t{_rid} as string,\n\t\t{_self} as string,\n\t\t{_ts} as integer,\n\t\tactors as (name as string)[],\n\t\tavailabilityDate as timestamp,\n\t\tgenre as string,\n\t\tid as string,\n\t\trating as string,\n\t\treleaseYear as short,\n\t\truntime as short,\n\t\tstreamingAvailabilityDate as timestamp,\n\t\ttier as short,\n\t\ttitle as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['movies/**']) ~> source1\nsource1 foldDown(unroll(actors, actors),\n\tmapColumn(\n\t\t{_attachments},\n\t\t{_etag},\n\t\t{_rid},\n\t\t{_self},\n\t\t{_ts},\n\t\tavailabilityDate,\n\t\tgenre,\n\t\tid,\n\t\trating,\n\t\treleaseYear,\n\t\truntime,\n\t\tstreamingAvailabilityDate,\n\t\ttier,\n\t\ttitle,\n\t\tname = actors.name\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 derive(SourceSystemId = 1,\n\t\treleaseYear = toLong(releaseYear)) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['onlineMoviesFlattened'],\n\ttruncate: true,\n\tmapColumn(\n\t\tSourceSystemId,\n\t\tSourceSystemMovieId = id,\n\t\tSouthridgeMovieId = id,\n\t\tPhysicalAvailabilityDate = availabilityDate,\n\t\tStreamingAvailabilityDate = streamingAvailabilityDate,\n\t\tGenre = genre,\n\t\tTitle = title,\n\t\tRating = rating,\n\t\tRuntimeMinutes = runtime,\n\t\tTheatricalReleaseYear = releaseYear,\n\t\tActorName = name\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/prodMovieCatalogFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetOnpremiseMovies",
								"type": "DatasetReference"
							},
							"name": "onpremisescombinedmovies"
						},
						{
							"dataset": {
								"referenceName": "ParquetOnpremisesMovieActors",
								"type": "DatasetReference"
							},
							"name": "onpremisescombinedmovieactors"
						},
						{
							"dataset": {
								"referenceName": "ParquetOnlineMovies",
								"type": "DatasetReference"
							},
							"name": "onlinemovies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetFinalOnlineCatalogDS",
								"type": "DatasetReference"
							},
							"name": "finalOnlineMovieCatalog"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Join3"
						},
						{
							"name": "DerivedColumn3"
						}
					],
					"script": "source(output(\n\t\tMovieID as string,\n\t\tMovieTitle as string,\n\t\tCategory as string,\n\t\tRating as string,\n\t\tRunTimeMin as integer,\n\t\tReleaseDate as date,\n\t\tOnlineMovieID as string,\n\t\tSourceSystemId as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> onpremisescombinedmovies\nsource(output(\n\t\tMovieActorID as string,\n\t\tMovieID as string,\n\t\tActorID as string,\n\t\tOnlineMovieID as string,\n\t\tActorName as string,\n\t\tGender as string,\n\t\tSourceSystemId as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> onpremisescombinedmovieactors\nsource(output(\n\t\tSourceSystemId as integer,\n\t\tSourceSystemMovieId as string,\n\t\tPhysicalAvailabilityDate as timestamp,\n\t\tStreamingAvailabilityDate as timestamp,\n\t\tGenre as string,\n\t\tTitle as string,\n\t\tRating as string,\n\t\tRuntimeMinutes as short,\n\t\tTheatricalReleaseYear as short,\n\t\tActorName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> onlinemovies\nonpremisescombinedmovies, onpremisescombinedmovieactors join(onpremisescombinedmovies@OnlineMovieID == onpremisescombinedmovieactors@OnlineMovieID,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tSourceSystemMovieId = onpremisescombinedmovieactors@MovieID,\n\t\tTitle = MovieTitle,\n\t\tGenre = Category,\n\t\tRating,\n\t\tRuntimeMinutes = RunTimeMin,\n\t\tTheatricalReleaseYear = ReleaseDate,\n\t\tActorId = ActorID,\n\t\tSouthridgeMovieId = onpremisescombinedmovieactors@OnlineMovieID,\n\t\tActorName,\n\t\tActorGender = Gender,\n\t\tSourceSystemId = onpremisescombinedmovieactors@SourceSystemId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nonlinemovies derive(SouthridgeMovieId = SourceSystemMovieId,\n\t\tActorId = 0,\n\t\tGender = \"NA\",\n\t\tSourceSystemId = toString(SourceSystemId),\n\t\tRuntimeMinutes = toLong(RuntimeMinutes),\n\t\tTheatricalReleaseYear = toLong(TheatricalReleaseYear)) ~> DerivedColumn1\nSelect1 derive(PhysicalAvailabilityDate = currentDate(),\n\t\tStreamingAvailabilityDate = currentDate(),\n\t\tSourceSystemId = toString(SourceSystemId),\n\t\tRuntimeMinutes = toLong(RuntimeMinutes),\n\t\tTheatricalReleaseYear = toLong(TheatricalReleaseYear)) ~> DerivedColumn2\nDerivedColumn1 select(mapColumn(\n\t\tSourceSystemId,\n\t\tSourceSystemMovieId,\n\t\tPhysicalAvailabilityDate,\n\t\tStreamingAvailabilityDate,\n\t\tGenre,\n\t\tTitle,\n\t\tRating,\n\t\tRuntimeMinutes,\n\t\tTheatricalReleaseYear,\n\t\tActorName,\n\t\tSouthridgeMovieId,\n\t\tActorId,\n\t\tGender\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2, DerivedColumn2 join(Select2@SouthridgeMovieId == Select1@SouthridgeMovieId\n\t&& lower(Select2@ActorName) == lower(Select1@ActorName),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join3\nJoin3 derive(CatalogId = uuid()) ~> DerivedColumn3\nDerivedColumn3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['finalOnlineCatalog'],\n\tmapColumn(\n\t\tSourceSystemId = Select2@SourceSystemId,\n\t\tSourceSystemMovieId = Select2@SourceSystemMovieId,\n\t\tSouthridgeMovieId = Select2@SouthridgeMovieId,\n\t\tPhysicalAvailabilityDate = Select2@PhysicalAvailabilityDate,\n\t\tStreamingAvailabilityDate = Select2@StreamingAvailabilityDate,\n\t\tGenre = Select2@Genre,\n\t\tTitle = Select2@Title,\n\t\tRating = Select2@Rating,\n\t\tRuntimeMinutes = Select2@RuntimeMinutes,\n\t\tTheatricalReleaseYear,\n\t\tActorName = Select2@ActorName,\n\t\tActorId = Select1@ActorId,\n\t\tActorGender,\n\t\tCatalogId\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> finalOnlineMovieCatalog"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stageOnPremiseTransactionDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "vanarsdelTransDS",
								"type": "DatasetReference"
							},
							"name": "VanarsdelTransactionsSr"
						},
						{
							"dataset": {
								"referenceName": "VanardselMovieMapDS",
								"type": "DatasetReference"
							},
							"name": "VanarsdelMovieMapSr"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "FourthCoffeeTransactionSr"
						},
						{
							"dataset": {
								"referenceName": "FourthCoffeeMovieMapDS",
								"type": "DatasetReference"
							},
							"name": "FourthCoffeeMovieMapSr"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "combinedStageOnPremTransactionDS",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Select2"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Union1"
						}
					],
					"script": "source(output(\n\t\tTransactionID as string,\n\t\tCustomerID as string,\n\t\tMovieID as string,\n\t\tRentalDate as integer,\n\t\tReturnDate as integer,\n\t\tRentalCost as decimal(19,4),\n\t\tLateFee as decimal(19,4),\n\t\tRewindFlag as boolean,\n\t\tCreatedDate as date,\n\t\tUpdatedDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> VanarsdelTransactionsSr\nsource(output(\n\t\tMovieID as string,\n\t\tOnlineMovieID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> VanarsdelMovieMapSr\nsource(output(\n\t\tTransactionID as string,\n\t\tCustomerID as string,\n\t\tMovieID as string,\n\t\tRentalDate as string,\n\t\tReturnDate as string,\n\t\tRentalCost as string,\n\t\tLateFee as string,\n\t\tRewindFlag as string,\n\t\tCreatedDate as string,\n\t\tUpdatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FourthCoffeeTransactionSr\nsource(output(\n\t\tMovieID as string,\n\t\tOnlineMovieID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FourthCoffeeMovieMapSr\nVanarsdelTransactionsSr, VanarsdelMovieMapSr join(VanarsdelTransactionsSr@MovieID == VanarsdelMovieMapSr@MovieID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tTransactionID,\n\t\tCustomerID,\n\t\tMovieID = VanarsdelTransactionsSr@MovieID,\n\t\tRentalDate,\n\t\tReturnDate,\n\t\tRentalCost,\n\t\tLateFee,\n\t\tRewindFlag,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tOnlineMovieID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(SourceSystemId = 3,\n\t\tRentalDate = toDate(concat(left(toString(RentalDate), 4), '-', left(right(toString(RentalDate),4), 2), '-', right(right(toString(RentalDate), 4), 2)), \"yyyy-MM-dd\"),\n\t\tReturnDate = toDate(concat(left(toString(ReturnDate), 4), '-', left(right(toString(ReturnDate),4), 2), '-', right(right(toString(ReturnDate), 4), 2)), \"yyyy-MM-dd\"),\n\t\tRentalCost = toDecimal(RentalCost),\n\t\tLateFee = toDecimal(LateFee)) ~> DerivedColumn1\nFourthCoffeeTransactionSr, FourthCoffeeMovieMapSr join(FourthCoffeeTransactionSr@MovieID == FourthCoffeeMovieMapSr@MovieID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join2\nJoin2 select(mapColumn(\n\t\tTransactionID,\n\t\tCustomerID,\n\t\tMovieID = FourthCoffeeTransactionSr@MovieID,\n\t\tRentalDate,\n\t\tReturnDate,\n\t\tRentalCost,\n\t\tLateFee,\n\t\tRewindFlag,\n\t\tCreatedDate,\n\t\tUpdatedDate,\n\t\tOnlineMovieID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 derive(SourceSystemId = 2,\n\t\tRentalDate = toDate(concat(left(toString(RentalDate), 4), '-', left(right(toString(RentalDate),4), 2), '-', right(right(toString(RentalDate), 4), 2)), \"yyyy-MM-dd\"),\n\t\tReturnDate = toDate(concat(left(toString(ReturnDate), 4), '-', left(right(toString(ReturnDate),4), 2), '-', right(right(toString(ReturnDate), 4), 2)), \"yyyy-MM-dd\"),\n\t\tLateFee = toDecimal(LateFee),\n\t\tRentalCost = toDecimal(RentalCost),\n\t\tRewindFlag = toBoolean(toString(RewindFlag)),\n\t\tCreatedDate = toDate(CreatedDate),\n\t\tUpdatedDate = toDate(UpdatedDate)) ~> DerivedColumn2\nDerivedColumn1, DerivedColumn2 union(byName: true)~> Union1\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['combinedOnPremTransactions'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/vanarsdelTransDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stageOnpremiseMovieDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VanarsdelMovieDS",
								"type": "DatasetReference"
							},
							"name": "VanarsdelMovieSr"
						},
						{
							"dataset": {
								"referenceName": "VanardselMovieMapDS",
								"type": "DatasetReference"
							},
							"name": "VanarsdelMovieMap"
						},
						{
							"dataset": {
								"referenceName": "DelimitedFourthCoffeeMovieDS",
								"type": "DatasetReference"
							},
							"name": "FourthCoffeeMovieSr"
						},
						{
							"dataset": {
								"referenceName": "FourthCoffeeMovieMapDS",
								"type": "DatasetReference"
							},
							"name": "FourthCoffeeMovieMap"
						},
						{
							"dataset": {
								"referenceName": "VanarsdelMovieActorDS",
								"type": "DatasetReference"
							},
							"name": "VanarsdelMoveActors"
						},
						{
							"dataset": {
								"referenceName": "VanarsdelActorsDS",
								"type": "DatasetReference"
							},
							"name": "VanarsdelActorsSr"
						},
						{
							"dataset": {
								"referenceName": "FourthCoffeeMovieActorsDS",
								"type": "DatasetReference"
							},
							"name": "FourthCoffeeMovieActorsSr"
						},
						{
							"dataset": {
								"referenceName": "FourthCoffeeActorsDS",
								"type": "DatasetReference"
							},
							"name": "FourthCoffeeActorsSr"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "combinedStageMovies",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "CombinedMovieActorDS",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Join3"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Join4"
						},
						{
							"name": "Select4"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Union1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Join5"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Join6"
						},
						{
							"name": "Select6"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Union2"
						},
						{
							"name": "DerivedColumnToHandleReleaseDate"
						}
					],
					"script": "source(output(\n\t\tMovieID as string,\n\t\tMovieTitle as string,\n\t\tCategory as string,\n\t\tRating as string,\n\t\tRunTimeMin as integer,\n\t\tReleaseDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> VanarsdelMovieSr\nsource(output(\n\t\tMovieID as string,\n\t\tOnlineMovieID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> VanarsdelMovieMap\nsource(output(\n\t\tMovieID as string,\n\t\tMovieTitle as string,\n\t\tCategory as string,\n\t\tRating as string,\n\t\tRunTimeMin as short,\n\t\tReleaseDate as date 'MM-dd-yyyy'\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FourthCoffeeMovieSr\nsource(output(\n\t\tMovieID as string,\n\t\tOnlineMovieID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FourthCoffeeMovieMap\nsource(output(\n\t\tMovieActorID as string,\n\t\tMovieID as string,\n\t\tActorID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> VanarsdelMoveActors\nsource(output(\n\t\tActorID as string,\n\t\tActorName as string,\n\t\tGender as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> VanarsdelActorsSr\nsource(output(\n\t\tMovieActorID as string,\n\t\tMovieID as string,\n\t\tActorID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FourthCoffeeMovieActorsSr\nsource(output(\n\t\tActorID as string,\n\t\tActorName as string,\n\t\tGender as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> FourthCoffeeActorsSr\nDerivedColumnToHandleReleaseDate, VanarsdelMovieMap join(VanarsdelMovieSr@MovieID == VanarsdelMovieMap@MovieID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tMovieID = VanarsdelMovieSr@MovieID,\n\t\tMovieTitle,\n\t\tCategory,\n\t\tRating,\n\t\tRunTimeMin,\n\t\tReleaseDate,\n\t\tOnlineMovieID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nFourthCoffeeMovieSr, FourthCoffeeMovieMap join(FourthCoffeeMovieSr@MovieID == FourthCoffeeMovieMap@MovieID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join2\nJoin2 select(mapColumn(\n\t\tMovieID = FourthCoffeeMovieSr@MovieID,\n\t\tMovieTitle,\n\t\tCategory,\n\t\tRating,\n\t\tRunTimeMin,\n\t\tReleaseDate,\n\t\tOnlineMovieID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nVanarsdelMoveActors, VanarsdelMovieMap join(VanarsdelMoveActors@MovieID == VanarsdelMovieMap@MovieID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join3\nJoin3 select(mapColumn(\n\t\tMovieActorID,\n\t\tMovieID = VanarsdelMoveActors@MovieID,\n\t\tActorID,\n\t\tOnlineMovieID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3, VanarsdelActorsSr join(Select3@ActorID == VanarsdelActorsSr@ActorID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join4\nJoin4 select(mapColumn(\n\t\tMovieActorID,\n\t\tMovieID,\n\t\tActorID = Select3@ActorID,\n\t\tOnlineMovieID,\n\t\tActorName,\n\t\tGender\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect4 derive(SourceSystemId = 3) ~> DerivedColumn1\nDerivedColumn2, DerivedColumn3 union(byName: true)~> Union1\nSelect1 derive(SourceSystemId = 3,\n\t\tReleaseDate = year(ReleaseDate)*10000+month(ReleaseDate)*100+dayOfMonth(ReleaseDate)) ~> DerivedColumn2\nSelect2 derive(SourceSystemId = 2,\n\t\tReleaseDate = year(ReleaseDate)*10000+month(ReleaseDate)*100+dayOfMonth(ReleaseDate)) ~> DerivedColumn3\nFourthCoffeeMovieActorsSr, FourthCoffeeMovieMap join(FourthCoffeeMovieActorsSr@MovieID == FourthCoffeeMovieMap@MovieID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join5\nJoin5 select(mapColumn(\n\t\tMovieActorID,\n\t\tMovieID = FourthCoffeeMovieActorsSr@MovieID,\n\t\tActorID,\n\t\tOnlineMovieID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nSelect5, FourthCoffeeActorsSr join(Select5@ActorID == FourthCoffeeActorsSr@ActorID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join6\nJoin6 select(mapColumn(\n\t\tMovieActorID,\n\t\tMovieID,\n\t\tActorID = Select5@ActorID,\n\t\tOnlineMovieID,\n\t\tActorName,\n\t\tGender\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nSelect6 derive(SourceSystemId = 2) ~> DerivedColumn4\nDerivedColumn1, DerivedColumn4 union(byName: true)~> Union2\nVanarsdelMovieSr derive(ReleaseDate = toDate(ReleaseDate, \"MM-dd-yyyy\")) ~> DerivedColumnToHandleReleaseDate\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['combinedOnPremiseMovies'],\n\ttruncate: true,\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1\nUnion2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['combinedMovieActors'],\n\ttruncate: true,\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/fourthCoffee')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"fileFilter": "*.csv"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "FourthCoffeeCSVFiles",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "rawFourthCoffeeCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-09-24T16:07:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FourthCoffeeCSVFiles')]",
				"[concat(variables('factoryId'), '/datasets/rawFourthCoffeeCSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prodMovieCatalog')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow-onlinefinalcatalog",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "prodMovieCatalogFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"onpremisescombinedmovies": {},
									"onpremisescombinedmovieactors": {},
									"onlinemovies": {},
									"finalOnlineMovieCatalog": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/prodMovieCatalogFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stageMovies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "flattenMovies",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/flattenMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stageOnpremiseMovies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "stageOnPremiseMoviesDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "stageOnpremiseMovieDF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"VanarsdelMovieSr": {},
									"VanarsdelMovieMap": {},
									"FourthCoffeeMovieSr": {},
									"FourthCoffeeMovieMap": {},
									"VanarsdelMoveActors": {},
									"VanarsdelActorsSr": {},
									"FourthCoffeeMovieActorsSr": {},
									"FourthCoffeeActorsSr": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/stageOnpremiseMovieDF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stageOnpremiseTransactions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "stageOnPremiseTransactionDF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"VanarsdelTransactionsSr": {},
									"VanarsdelMovieMapSr": {},
									"FourthCoffeeTransactionSr": {},
									"FourthCoffeeMovieMapSr": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/stageOnPremiseTransactionDF')]"
			]
		}
	]
}